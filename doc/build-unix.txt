Copyright (c) 2009-2017 Bitcoin Developers
Copyright (c) 2011-2023 Litecoin Developers
Distributed under the MIT/X11 software license, see the accompanying
file COPYING or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the OpenSSL Project for use in
the OpenSSL Toolkit (http://www.openssl.org/).  This product includes
cryptographic software written by Eric Young (eay@cryptsoft.com) and UPnP
software written by Thomas Bernard.


UNIX BUILD NOTES
================

Dependencies
------------

 Library        Purpose              Description
 -------        -------              -----------
 libssl         SSL Support       Secure communications
 libdb4.8       Berkeley DB       Blockchain & wallet storage
 libboost       Boost             C++ Library

 # optional
 miniupnpc      UPnP Support      firewall-jumping support
 qt                GUI            GUI toolkit (only needed when GUI enabled)
 protobuf      Payments in GUI    Data interchange format used for payment protocol (only needed when GUI enabled)
 libqrencode   QRCode generation  QRCode generation (only needed when GUI enabled)

miniupnpc may be used for UPnP port mapping.  It can be downloaded from
http://miniupnp.tuxfamily.org/files/.  As default FlapX has UPnP support. Set USE_UPNP to a different value to control this:
 USE_UPNP=-    No UPnP support - miniupnp not required
 USE_UPNP=0    (the default) UPnP support turned off by default at runtime
 USE_UPNP=1    UPnP support turned on by default at runtime

libqrencode may be used for QRCode image generation. It can be downloaded
from http://fukuchi.org/works/qrencode/index.html.en, or installed via
your package manager. Set USE_QRCODE to control this:
 USE_QRCODE=0   (the default) No QRCode support - libqrcode not required
 USE_QRCODE=1   QRCode support enabled

See readme-qt.rst for other instructions on building flapx-qt, the graphical user interface.

Licenses of statically linked libraries:
 Berkeley DB    New BSD license with additional requirement that linked software must be free open source
 Boost          MIT-like license
 miniupnpc      New (3-clause) BSD license

Dependency Build Instructions: Ubuntu & Debian
----------------------------------------------

Build requirements:

sudo apt-get install build-essential libssl-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-thread-dev 

If boost fails you can try:
sudo apt-get install libboost-all-dev

BerkeleyDB4.8 is required for the wallet.

For Ubuntu only: db4.8 packages are available here. You can add the repository and install using the following commands:

sudo apt-get install software-properties-common
sudo add-apt-repository ppa:bitcoin/bitcoin
sudo apt-get update
sudo apt-get install libdb4.8-dev libdb4.8++-dev

#For UPnP support
sudo apt-get install libminiupnpc-dev

# For building flapx-qt
sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools qt5-default libprotobuf-dev protobuf-compiler libqrencode-dev

To Build
--------

# Headless FlapX (flapxd)
cd to build folder /src/
make -f makefile.unix 
strip flapxd         

# flapx-qt (GUI  #optional required)
cd to build folder
qmake "USE_QRCODE=1"
make


Dependency Build Instructions: Gentoo
-------------------------------------

emerge -av1 --noreplace boost glib openssl sys-libs/db:4.8

Take the following steps to build (no UPnP support):
 cd ${FLAPX_DIR}/src
 make -f makefile.unix USE_UPNP= USE_IPV6=1 BDB_INCLUDE_PATH='/usr/include/db4.8'
 strip flapxd


Notes
-----

The release is built with GCC and then "strip flapxd" to strip the debug
symbols, which reduces the executable size by about 90%.


Berkeley DB
-----------
You need Berkeley DB 4.8.  If you have to build Berkeley DB yourself:
../dist/configure --enable-cxx --disable-shared --with-pic
make install


Boost
-----
If you need to build Boost yourself:
sudo su
./bootstrap.sh
./bjam install


Security
--------
To help make your FlapX installation more secure by making certain attacks impossible to
exploit even if a vulnerability is found, you can take the following measures:

* Position Independent Executable
    Build position independent code to take advantage of Address Space Layout Randomization
    offered by some kernels. An attacker who is able to cause execution of code at an arbitrary
    memory location is thwarted if he doesn't know where anything useful is located.
    The stack and heap are randomly located by default but this allows the code section to be
    randomly located as well.

    On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error
    such as: "relocation R_X86_64_32 against `......' can not be used when making a shared object;"

    To build with PIE, use:
    make -f makefile.unix ... -e PIE=1 
   
    To test that you have built PIE executable, install scanelf, part of paxutils, and use:
    scanelf -e ./flapxd

    The output should contain:
    TYPE
    ET_DYN

* Non-executable Stack
    If the stack is executable then trivial stack based buffer overflow exploits are possible if
    vulnerable buffers are found. By default, litecoin should be built with a non-executable stack
    but if one of the libraries it uses asks for an executable stack or someone makes a mistake
    and uses a compiler extension which requires an executable stack, it will silently build an
    executable without the non-executable stack protection.

    To verify that the stack is non-executable after compiling use:
    scanelf -e ./flapxd

    the output should contain:
    STK/REL/PTL
    RW- R-- RW-

    The STK RW- means that the stack is readable and writeable but not executable.
